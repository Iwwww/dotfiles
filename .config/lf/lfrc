set ratios 1:2:3
set cleaner '~/.config/lf/cleaner'
set previewer '~/.config/lf/scope' # Basic Settings
set preview true
set color256 true
set drawbox true
set icons true
set ignorecase true

# interpreter for shell commands
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# use enter for shell commands
map <enter> shell

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    test -L $f && f=$(readlink -f $f)
    case $(file --mime-type $f -b) in
        text/*) nvim $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# require trash-cli package
cmd trash ${{
    set -f
    printf "$fx\n"
    printf "trash? [Y/N]"
    read ans
    [ $ans = "y" ] || [ $ans = "Y" ] && trash-put $fx
}}

# require archivemount package
cmd open ${{
    case "$f" in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2|*.tar.gz|*.tgz|*.tar.xz|*.txz|*.zip|*.rar|*.iso)
            mntdir="$f-archivemount"
            if [ ! -d "$mntdir" ]; then
                mkdir "$mntdir"
                archivemount "$f" "$mntdir"
                echo "$mntdir" >> "/tmp/__lf_archivemount_$id"
            fi
            mntdir="$(printf '%s' "$mntdir" | sed 's/\\/\\\\/g;s/"/\\"/g')"
            lf -remote "send $id cd \"$mntdir\""
            lf -remote "send $id reload"
            ;;
        *)
            for f in $fx; do
                $OPENER $f > /dev/null 2> /dev/null &
            done;;
    esac
}}

# unmount archivemount
lfcd () {
    tmp="$(mktemp)"
    fid="$(mktemp)"
    lf -command '$printf $id > '"$fid"'' -last-dir-path="$tmp" "$@"
    id="$(cat "$fid")"
    archivemount_dir="/tmp/__lf_archivemount_$id"
    if [ -f "$archivemount_dir" ]; then
        cat "$archivemount_dir" | \
            while read -r line; do
                sudo umount "$line"
                rmdir "$line"
            done
        rm -f "$archivemount_dir"
    fi
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        rm -f "$tmp"
        if [ -d "$dir" ]; then
            if [ "$dir" != "$(pwd)" ]; then
                cd "$dir"
            fi
        fi
    fi
}

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# require exa (eza) package
cmd on-select &{{
    lf -remote "send $id set statfmt \"$(exa -ld --color=always "$f")\""
}}

cmd fzf_jump ${{
    res="$(find . -maxdepth 4 | fzf --reverse --header='Jump to location')"
    if [ -n "$res" ]; then
        if [ -d "$res" ]; then
            cmd="cd"
        else
            cmd="select"
        fi
        res="$(printf '%s' "$res" | sed 's/\\/\\\\/g;s/"/\\"/g')"
        lf -remote "send $id $cmd \"$res\""
    fi
}}

cmd fzf_search ${{
    RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case "
    res="$(
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1 | sed 's/\\/\\\\/g;s/"/\\"/g'
    )"
    [ -n "$res" ] && lf -remote "send $id select \"$res\""
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd set_wallpaper ${{
    set -f
    feh --bg-fill $fx
    printf "path='${fx}'"
    script_path="/home/mikhail/.local/scripts/set_wallpaper"
    wal -i $fx -o $script_path --backend schemer2
}}

cmd set_wallpaper_other ${{
    set -f
    feh --bg-fill $fx
    printf "path='${fx}'"
    script_path="/home/mikhail/.local/scripts/set_wallpaper"
    wal -i $fx -o $script_path --backend wal
}}

cmd drag_n_drop_selected ${{
        ripdrag  $fx --resizable --icon-size 70 -x
}}

cmd drag_n_drop_all ${{
    ripdrag $(ls $PWD) --resizable --icon-size 70
    printf $(ls $PWD)
}}

cmd execute

# Basic vars
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set icons
set period 1
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
# set cleaner '~/.config/lf/cleaner'
# set previewer '~/.config/lf/scope'
set previewer ~/.config/lf/preview
set cleaner ~/.config/lf/cleaner

# Hotkeys
map <c-t> :!terminal &

# cd Functions
map gr cd ~/repos
map gd cd ~/Documents
map gD cd ~/Downloads
map gs cd ~/scripts
map gp cd ~/Pictures
map gv cd ~/Videos
map gc cd ~/.config
map gm cd /run/media
map gM cd /mnt/usb
map gl cd ~/.local
map gb cd ~/builds

map <delete> trash
map DD trash

map M mkdir
map XX extract
map sw set_wallpaper
map sW set_wallpaper_other
map a drag_n_drop_selected
map A drag_n_drop_all

map <c-f> :fzf_jump
map <c-g> :fzf_search

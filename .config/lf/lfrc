# based on https://codeberg.org/tplasdio/lf-config
# To get image previews, you need these 4 steps:
# 1. Install ueberzug
# 2. The previewer file (~/.config/lf/previewer for me), must have a command
#    similar to mine to generate ueberzug images.
# 3. A `set cleaner` line as below is a cleaner script.
# 4. lf should be started through a wrapper script (~/.local/bin/lfub for me)
#    that creates the environment for ueberzug. This command can be be aliased
#    in your shellrc (`alias lf="lfub").

# Main options
set icons
set period 1
# set hidden!
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
set cleaner '~/.config/lf/cleaner'
set previewer '~/.config/lf/previewer'
set promptfmt "
\033[48;2;35;38;39;38;2;28;220;156m 󰣇 
\033[38;2;35;38;39;48;2;202;31;31m
\033[38;2;202;31;31;48;2;40;47;62m
\033[38;2;255;255;255m %w 
\033[38;2;40;47;62;48;2;58;67;89m
\033[38;2;255;255;255m %f 
\033[;38;2;58;67;89;49m\033[m"
set incsearch
set incfilter
# set globsearch on
# set ratios 2:3:4 # 2:3:7:7
set ratios 2:6:9
set truncatechar "…"
set waitmsg "\033[1;31m⏎\033[m"
set timefmt "02/01/2006 15:04:05 "
set infotimefmtnew '02/01 15:04'
set infotimefmtold '02/01/06'
set errorfmt "\033[1;31m"
set numberfmt "\033[38;2;75;87;116m"
set dircounts
set tabstop 4
set scrolloff 5
# set wrapscroll
set shellopts '-eu'
set ifs "\n"
set shell "bash"
set ruler 'df:acc:progress:selection:filter:ind'
set cursorpreviewfmt "\033[7m"

source '~/.config/lf/opener'

%test $LF_LEVEL -eq 1 || >&2 printf "Warning: You're in a nested lf instance!"

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

# require trash-cli package
cmd trash ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf -- "%s\n" $fx
	printf "\t\033[1;34mTrash? \033[37m[\033[32my\033[37m/\033[31mN\033[37m]\033[m "
	read -r REPLY

	case "$REPLY" in
		[yYsS]) trash-put $(echo $fx | sed 's/\n/n &/g') ;;
	esac
}}


cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf -- "%s\n" $fx | sed 's|'"$HOME"'||'
	printf "\t\033[1;33mRemove? \033[37m[\033[32my\033[37m/\033[31mN\033[37m]\033[m "
	read -r REPLY
	case "$REPLY" in
		[yY]) rm -rf -- $fx ;;
	esac
}}

# extract the current file with the right command
cmd extract ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf -- "%s\n" $fx
	printf "\t\033[1;34mExtract? \033[37m[\033[32my\033[37m/\033[31mN\033[37m]\033[m "
	read -r REPLY
	case "$REPLY" in
		[yYsS]) case $fx in
            *) unar $f ;;
            # *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
            # *.tar.gz|*.tgz) tar xzvf $f;;
            # *.tar.xz|*.txz) tar xJvf $f;;
            # *.zip) unar $f;;
            # *.rar) unar $f;;
            # *.7z) 7z x $f;;
        esac
	esac
}}

cmd broot ${{
	# You need to manually close broot printing the
	# selected path with :print-path or :pp. You may
	# want to configure broot keybindings
	selected="$(broot)"
	if [ -d "$selected" ]; then
		lf -remote "send ${id} cd \"${selected}\""
	elif [ -e "$selected" ]; then
		lf -remote "send ${id} select \"${selected}\""
	else
		>&2 printf "Could not select %s\n" "${selected}"
	fi
}}

cmd paste_link %{{
	IFS='
'
	# TODO: reescribir no con los marcados a copiar/pegar,
	# sino con los seleccionados: $fs
	set -- $(cat ~/.local/share/lf/files)
	mode="$1"
	shift
	if [ $# -lt 1 ]; then
		lf -remote "send $id echo no files to link"
		exit 1
	fi
	case "$mode" in
		# symbolically copy mode is indicating a soft link
		copy) ln -sr -t . -- "$@";;
		# while a move mode is indicating a hard link
		move) ln -t . -- "$@";;
	esac \
		|| exit $?
	rm ~/.local/share/lf/files
	lf -remote "send clear"
}}

cmd follow_link %{{
	lf -remote "send ${id} select \"$(readlink $f)\""
}}

cmd setbg "$1"

# require exa (eza) package
cmd on-select &{{
    lf -remote "send $id set statfmt \"$(exa -ld --color=always "$f")\""
}}

cmd fzf_jump ${{
    res="$(find . -maxdepth 4 | fzf --reverse --header='Jump to location')"
    if [ -n "$res" ]; then
        if [ -d "$res" ]; then
            cmd="cd"
        else
            cmd="select"
        fi
        res="$(printf '%s' "$res" | sed 's/\\/\\\\/g;s/"/\\"/g')"
        lf -remote "send $id $cmd \"$res\""
    fi
}}

cmd fzf_search ${{
    RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case "
    res="$(
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1 | sed 's/\\/\\\\/g;s/"/\\"/g'
    )"
    [ -n "$res" ] && lf -remote "send $id select \"$res\""
}}

cmd set_wallpaper ${{
    set -f
    printf "path='${fx}'"
    script_path="/home/mikhail/.local/scripts/set_wallpaper"
    wal -i $fx -o $script_path --backend schemer2 --saturate 0.6
}}

cmd set_wallpaper_other ${{
    set -f
    printf "path='${fx}'"
    script_path="/home/mikhail/.local/scripts/set_wallpaper"
    wal -i $fx -o $script_path --backend wal --saturate 0.8
}}

cmd drag_n_drop_selected ${{
        files=$(echo -e $fx|  awk -F '\\n' '{print $0}')
        $files=$(echo "$files")
        # printf $files
        # ripdrag  $fx --resizable --icon-size 70 -x
}}

cmd drag_n_drop_all ${{
    ripdrag $(ls $PWD) --resizable --icon-size 70
    printf $(ls $PWD)
}}

# Movement
map gr cd ~/repos
map gd cd ~/Documents
map gD cd ~/Downloads
map gn cd ~/Documents/notes
map gw cd ~/Documents/wiki
map gs cd ~/scripts
map gp cd ~/Pictures
map gv cd ~/Videos
map gc cd ~/.config
map gm cd /run/media
map gM cd /mnt/usb
map gl cd ~/.local
map gb cd ~/builds
map gt cd ~/.local/share/Trash

map <delete> trash
map DE delete
map DD trash

map M mkdir
map EE extract
map sw set_wallpaper
map sW set_wallpaper_other
map a &dragon -x -T $fx && printf # Drag from selected files
map A &dragon -a -x -T $fx  # Drag all selected files and exit

map <c-f> broot
map <c-g> :fzf_search

# New forked terminal in current directory
map W &{ nohup "${TERMINAL:-st}" >/dev/null 2>&1& }

# Copy selected file names
map Y $printf "%s" "$fx" | xclip -selection clipboard
